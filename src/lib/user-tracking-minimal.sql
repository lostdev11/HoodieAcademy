-- Minimal User Tracking Schema - Just Tables
-- Run this in your Supabase SQL Editor

-- =====================================================
-- Create the enum type
-- =====================================================
DO $$ BEGIN
    CREATE TYPE public.event_kind AS ENUM (
      'wallet_connect',
      'wallet_disconnect',
      'page_view',
      'course_start',
      'course_complete',
      'lesson_start',
      'lesson_complete',
      'exam_started',
      'exam_submitted',
      'exam_approved',
      'exam_rejected',
      'placement_started',
      'placement_completed',
      'custom'
    );
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

-- =====================================================
-- Create profiles table
-- =====================================================
CREATE TABLE IF NOT EXISTS public.profiles (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  handle TEXT UNIQUE,
  display_name TEXT,
  avatar_url TEXT,
  primary_wallet TEXT,
  last_active_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- =====================================================
-- Create wallets table
-- =====================================================
CREATE TABLE IF NOT EXISTS public.wallets (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL,
  address TEXT NOT NULL,
  label TEXT,
  is_primary BOOLEAN NOT NULL DEFAULT false,
  connected_first_at TIMESTAMPTZ,
  connected_last_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- =====================================================
-- Create sessions table
-- =====================================================
CREATE TABLE IF NOT EXISTS public.sessions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL,
  wallet_address TEXT,
  started_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  last_heartbeat_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  ended_at TIMESTAMPTZ,
  user_agent TEXT,
  ip TEXT,
  is_active BOOLEAN DEFAULT true
);

-- =====================================================
-- Create event_log table
-- =====================================================
CREATE TABLE IF NOT EXISTS public.event_log (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL,
  session_id UUID,
  wallet_address TEXT,
  kind public.event_kind NOT NULL,
  path TEXT,
  referrer TEXT,
  course_id TEXT,
  lesson_id TEXT,
  exam_id TEXT,
  payload JSONB NOT NULL DEFAULT '{}',
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- =====================================================
-- Create course_progress table
-- =====================================================
CREATE TABLE IF NOT EXISTS public.course_progress (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL,
  course_id TEXT NOT NULL,
  started_at TIMESTAMPTZ,
  completed_at TIMESTAMPTZ,
  last_event_at TIMESTAMPTZ,
  progress_percent NUMERIC(5,2) NOT NULL DEFAULT 0,
  UNIQUE (user_id, course_id)
);

-- =====================================================
-- Create placement_progress table
-- =====================================================
CREATE TABLE IF NOT EXISTS public.placement_progress (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL,
  status TEXT CHECK (status IN ('not_started','in_progress','submitted','approved','rejected')) NOT NULL DEFAULT 'not_started',
  started_at TIMESTAMPTZ,
  submitted_at TIMESTAMPTZ,
  decided_at TIMESTAMPTZ,
  decided_by UUID,
  score NUMERIC(5,2),
  notes TEXT
);

-- =====================================================
-- Create admin_approvals table
-- =====================================================
CREATE TABLE IF NOT EXISTS public.admin_approvals (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  admin_id UUID NOT NULL,
  user_id UUID NOT NULL,
  resource_kind TEXT NOT NULL CHECK (resource_kind IN ('exam','placement')),
  resource_id TEXT NOT NULL,
  action TEXT NOT NULL CHECK (action IN ('approved','rejected')),
  reason TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- =====================================================
-- Enable Row Level Security
-- =====================================================
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.wallets ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.event_log ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.course_progress ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.placement_progress ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.admin_approvals ENABLE ROW LEVEL SECURITY;

-- =====================================================
-- Create basic RLS policies
-- =====================================================

-- Profiles policies
CREATE POLICY "profiles_all" ON public.profiles 
  FOR ALL USING (true);

-- Wallets policies
CREATE POLICY "wallets_all" ON public.wallets 
  FOR ALL USING (true);

-- Sessions policies
CREATE POLICY "sessions_all" ON public.sessions 
  FOR ALL USING (true);

-- Event log policies
CREATE POLICY "event_log_all" ON public.event_log 
  FOR ALL USING (true);

-- Course progress policies
CREATE POLICY "course_progress_all" ON public.course_progress 
  FOR ALL USING (true);

-- Placement progress policies
CREATE POLICY "placement_progress_all" ON public.placement_progress 
  FOR ALL USING (true);

-- Admin approvals policies
CREATE POLICY "admin_approvals_all" ON public.admin_approvals 
  FOR ALL USING (true);

-- =====================================================
-- Grant basic permissions
-- =====================================================
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT SELECT, INSERT, UPDATE ON ALL TABLES IN SCHEMA public TO authenticated;
GRANT USAGE ON ALL SEQUENCES IN SCHEMA public TO authenticated;
