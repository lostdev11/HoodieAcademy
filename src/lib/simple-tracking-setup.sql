-- Simple Wallet Tracking Setup
-- This ensures the basic tables exist for wallet-to-user mapping
-- Run this in your Supabase SQL Editor

-- =====================================================
-- 1. USERS TABLE (Core user data)
-- =====================================================
CREATE TABLE IF NOT EXISTS users (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  wallet_address TEXT UNIQUE NOT NULL,
  display_name TEXT,
  squad TEXT,
  profile_completed BOOLEAN DEFAULT false,
  squad_test_completed BOOLEAN DEFAULT false,
  placement_test_completed BOOLEAN DEFAULT false,
  is_admin BOOLEAN DEFAULT false,
  last_active TIMESTAMPTZ,
  last_seen TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  username TEXT,
  bio TEXT,
  profile_picture TEXT,
  total_xp INTEGER DEFAULT 0,
  level INTEGER DEFAULT 1
);

-- Create indexes for users
CREATE INDEX IF NOT EXISTS idx_users_wallet_address ON users(wallet_address);
CREATE INDEX IF NOT EXISTS idx_users_squad ON users(squad);
CREATE INDEX IF NOT EXISTS idx_users_is_admin ON users(is_admin);
CREATE INDEX IF NOT EXISTS idx_users_last_active ON users(last_active);
CREATE INDEX IF NOT EXISTS idx_users_created_at ON users(created_at);

-- Enable RLS for users
ALTER TABLE users ENABLE ROW LEVEL SECURITY;

-- Create policies for users (permissive for user creation)
CREATE POLICY "Users can view all user profiles" ON users
  FOR SELECT USING (true);

CREATE POLICY "Users can update their own profile" ON users
  FOR UPDATE USING (auth.jwt() ->> 'wallet_address' = wallet_address);

CREATE POLICY "Users can insert their own profile" ON users
  FOR INSERT WITH CHECK (auth.jwt() ->> 'wallet_address' = wallet_address);

-- Allow service role to manage all users (for API endpoints)
CREATE POLICY "Service role can manage all users" ON users
  FOR ALL USING (auth.role() = 'service_role');

-- =====================================================
-- 2. EVENT LOG TABLE (for activity tracking)
-- =====================================================

-- Create the enum type for event kinds
DO $$ BEGIN
    CREATE TYPE public.event_kind AS ENUM (
      'wallet_connect',
      'wallet_disconnect',
      'page_view',
      'course_start',
      'course_complete',
      'lesson_start',
      'lesson_complete',
      'exam_started',
      'exam_submitted',
      'exam_approved',
      'exam_rejected',
      'placement_started',
      'placement_completed',
      'custom'
    );
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

-- Create event_log table
CREATE TABLE IF NOT EXISTS public.event_log (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  wallet_address TEXT,
  kind public.event_kind NOT NULL,
  path TEXT,
  referrer TEXT,
  course_id TEXT,
  lesson_id TEXT,
  exam_id TEXT,
  payload JSONB NOT NULL DEFAULT '{}',
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create indexes for event_log
CREATE INDEX IF NOT EXISTS event_log_wallet_address_idx ON public.event_log(wallet_address);
CREATE INDEX IF NOT EXISTS event_log_kind_idx ON public.event_log(kind);
CREATE INDEX IF NOT EXISTS event_log_created_at_idx ON public.event_log(created_at DESC);

-- Enable RLS for event_log
ALTER TABLE public.event_log ENABLE ROW LEVEL SECURITY;

-- Create policies for event_log
CREATE POLICY "Users can insert their own events" ON public.event_log
  FOR INSERT WITH CHECK (auth.jwt() ->> 'wallet_address' = wallet_address);

CREATE POLICY "Users can view their own events" ON public.event_log
  FOR SELECT USING (auth.jwt() ->> 'wallet_address' = wallet_address);

-- Allow service role to manage all events
CREATE POLICY "Service role can manage all events" ON public.event_log
  FOR ALL USING (auth.role() = 'service_role');

-- =====================================================
-- 3. GRANTS AND PERMISSIONS
-- =====================================================

-- Grant necessary permissions to authenticated users
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT SELECT, INSERT, UPDATE ON users TO authenticated;
GRANT SELECT, INSERT ON public.event_log TO authenticated;
GRANT USAGE ON ALL SEQUENCES IN SCHEMA public TO authenticated;

-- Grant permissions to service role
GRANT ALL ON users TO service_role;
GRANT ALL ON public.event_log TO service_role;

-- =====================================================
-- 4. COMMENTS
-- =====================================================
COMMENT ON TABLE users IS 'Core user data with wallet addresses for simple tracking';
COMMENT ON TABLE public.event_log IS 'Activity log for tracking user actions and events';
COMMENT ON COLUMN users.wallet_address IS 'Primary wallet address for user identification';
COMMENT ON COLUMN users.total_xp IS 'Total experience points for leaderboard';
COMMENT ON COLUMN users.level IS 'User level based on XP';
COMMENT ON COLUMN public.event_log.payload IS 'Additional data for the event in JSON format';
